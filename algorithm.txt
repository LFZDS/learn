
冒泡，快速，选择，插入，归并
回溯，二分，斐波那契数列
多层for 循环法

重复数字序列，返回不重复组合
排序，n > 0 && n === n -1 && ！used[i - 1]
不重复数据序列，返回不重复组合
indexOf
给定一个无重复元素的数组 candidates 和一个目标数 target
start
给定一个重复元素的数组 candidates 和一个目标数 target
排序 n > 0 && n === n -1  start



获取方法名称
function getFunc(func) {
    if (func.name !== undefined) {
       return func.name;
    }
    // IE兼容
    var funcStr = func.toString();
    funcStr.replace('function ', '');
    funcStr.subString(0, funcStr.indexOf('('));
    return funcStr;
}

冒泡
function bSort(arr) {
  var len = arr.length;
  for (var i = 0; i < len-1; i++) {
    for (var j = 0; j < len - 1 - i; j++) {
         // 相邻元素两两对比，元素交换，大的元素交换到后面
        if (arr[j] > arr[j + 1]) {
            var temp = arr[j];
            arr[j] = arr[j+1];
            arr[j+1] = temp;
        }
    }
  }
  return arr;
}

快速
var quickSort = function(arr) {

　　if (arr.length <= 1) { return arr; }

　　var pivotIndex = Math.floor(arr.length / 2);

　　var pivot = arr.splice(pivotIndex, 1)[0];

　　var left = [];

　　var right = [];

　　for (var i = 0; i < arr.length; i++){

　　　　if (arr[i] < pivot) {

　　　　　　left.push(arr[i]);

　　　　} else {

　　　　　　right.push(arr[i]);

　　　　}

　　}

　　return quickSort(left).concat([pivot], quickSort(right));

};

插入
function insertSort(arr) {
        var len =arr.length;
        for (var i=1;i<len; i++) {
            var temp=arr[i];
            var j=i-1;//默认已排序的元素
            while (j>=0 && arr[j]>temp) {  //在已排序好的队列中从后向前扫描
                    arr[j+1]=arr[j]; //已排序的元素大于新元素，将该元素移到一下个位置
                    j--;
                }
            arr[j+1]=temp;
            }
        return arr
     }

选择
function selsetSort(arr){
	var len = arr.length;
	var index;
	for(var i=0;i<len-1;i++){
		index=i;
		for(var j=i+1;j<len;j++){
			if(arr[index]>arr[j]){//寻找最小值
				index=j;//保存最小值的索引
			}
		}
		if(index!=i){
		var temp =arr[i];
		arr[i]=arr[index];
		arr[index]=temp;
	}
	}
	return arr;
}


归并
function mergeSort(arr) {
    const length = arr.length;
    if (length === 1) { //递归算法的停止条件，即为判断数组长度是否为1
        return arr;
    }
    const mid = Math.floor(length / 2);

    const left = arr.slice(0,  mid);
    const right = arr.slice(mid, length);

    return merge(mergeSort(left), mergeSort(right)); //要将原始数组分割直至只有一个元素时，才开始归并
}

function merge(left, right) {
    const result = [];
    let il = 0;
    let ir = 0;

    //left, right本身肯定都是从小到大排好序的
    while( il < left.length && ir < right.length) {
        if (left[il] < right[ir]) {
            result.push(left[il]);
            il++;
        } else {
            result.push(right[ir]);
            ir++;
        }

    }

    //不可能同时存在left和right都有剩余项的情况, 要么left要么right有剩余项, 把剩余项加进来即可
    while (il < left.length) {
        result.push(left[il]);
        il++;
    }
    while(ir < right.length) {
        result.push(right[ir]);
        ir++;
    }
    return result;
}

广度
function PrintFromTopToBottom(root)
{
    if (!root) {
        return null;
    }
    var queue = [root];
    var result = [];
    while (queue.length) {
        var node = queue.pop();
        result.push(node.val);
        if (node.left) {
            queue.push(node.left);
        }
        if (node.right) {
            queue.push(node.right);
        }
    }
    return result;
}


二分

 var left = 0;
    var right = nums.length - 1;
    while (left <= right) {
        var mid = Math.floor((left + right) / 2);
        if (nums[mid] === target) {
            return mid;
        } else if (nums[mid] > target) {
            right = mid - 1;
        } else {
            left = mid + 1;
        }
    }
    return left;


回溯法
function jumpFloor(number){
     var length = 0;

     getData(number, []);
     return length;
     function getData(number, step) {
        [1, 2].forEach(item => {
            var _step = JSON.parse(JSON.stringify(step));
            if (number - item === 0) {
                _step.push(item);
                length++;
            } else if (number - item > 0) {
                _step.push(item);
                getData(number - item, _step);
            }
        });
     }
}
var permuteUnique = function(nums) {
     var result = [];
    getResult(nums, result, [], []);
    return result.map(item => {
        return item.split(',');
    });
};

function getResult (nums, result, temp, tempNum) {
    if (temp.length === nums.length) {
        var data = temp.join(',');
        if (result.indexOf(data) === -1) {
            result.push(data);
        }

        return;
    }
    var i = 0;
    while (i < nums.length) {
        if (tempNum.indexOf(i) === - 1) {
            var _temp = JSON.parse(JSON.stringify(temp));
            var _tempNum = JSON.parse(JSON.stringify(tempNum));
            _temp.push(nums[i]);
            _tempNum.push(i);
            getResult(nums, result, _temp, _tempNum);
        }
        i++;
    }
}
var combinationSum2 = function(candidates, target) {
    var result = [];
    getNumber(candidates, target, result, [], 0);
    return result.map(item => {
        return item.split('');
    });
};

function getNumber(candidates, target, result, temp, start) {
    var i = start;
    var map = {}
    while (i < candidates.length) {
        if (map[candidates[i]]) {
            i++;
            continue;
        }
        var _temp = JSON.parse(JSON.stringify(temp));

        if (target - candidates[i] > 0) {
            _temp.push(candidates[i]);
            getNumber(candidates, target - candidates[i], result, _temp, i + 1);
        } else if (target - candidates[i] == 0) {
             _temp.push(candidates[i]);
            var data = _temp.sort(function (a, b) {
                return a - b;
            }).join('');
            if (result.indexOf(data) === -1) {
                result.push(data);
            }
        }
        i++;
    }
}

斐波那契数列
function jumpFloor(number){
    if (number === 1) {
        return 1;
    }
    if (number === 2) {
        return 2;
    }
     if (number === 3) {
        return 3;
    }
    return jumpFloor(number -1) + jumpFloor(number -2);
}

二进制转化


var inorderTraversal = function(root) {
    // 递归
    // var result = [];
    // getresult(root, result);
    // function getresult (root, result) {
    //     if (!root) {
    //         return;
    //     }
    //     getresult(root.left, result);
    //     result.push(root.val);
    //     getresult(root.right, result);
    // }
    // return result;

    // 迭代 中
    var cur = root;
    var stack = [];
    var result = [];
    while (cur || stack.length) {
       while (cur) {
           stack.push(cur);
           cur = cur.left;
       }
       cur = stack.pop();
       result.push(cur.val);
       cur = cur.right;
    }
    return result;
// 先
 while (cur || stack.length) {
       while (cur) {
	result.push(cur.val);
           stack.push(cur);
           cur = cur.left;
       }
       cur = stack.pop();
       cur = cur.right;
    }
    return result;
};





tree转arr
function getResult (nums) {
    var data = nums.filter(item => {
        return item.parentId === id;
    }) || [];
    if (!data.length) {
        rerurn [];
    }

    return data.map(item => {
        return  {
            ...item,
            children: getResult(nums, data[0].id);
        };
    });
}

深度clone
function clone(data) {
    if (typeof data !== 'object') {
        return data;
    } else {
        let result;
        if (data instanceof Array) {
           result = Array(data.length);

        } else {
             result = Object.create(Object.getPrototypeOf(data));

        }
        for(var i in data) {
            if (data.hasOwnProperty(i)) {
            result[i] = clone(data[i]);
            }
        }
        return result;
    }
}

打印最多的字符
function find(str) {
    var obj = {};
    var maxWord;
    for(var i = 0; i < str.length; i++) {
        if (obj[str[i]]) {
            obj[str[i]]++;
        } else {
            obj[str[i]] = 1;
        }

        if (!maxWord) {
            maxWord = str[i];
        }
        if (obj[str[i]] > obj[maxWord]) {
            maxWord = str[i];
        }
    }
    console.log(maxWord, obj[maxWord]);
}

获取url参数
function getQuery (href) {
    var index = href.indexOf('?');
    var query = href.substring(index + 1);
    var params = query.split('&');
    var obj = {};
    params.forEach(item => {
        var data = item.split('=');
        obj[data[0]] = data[1];
    });
    return obj;
}

通用事件注册
function (dom, type, fun) {
if (dom.addEventListener) {
dom.addEventListener(type, fun, false);
} else if (dom.attachEvent) {
dom.attachEvent('on' + type, fun);
} else {
dom['on' + type] = fun;
}
}

保留两位小数
function toFixed (x) {
    var num = parseFloat(x);
    if (isNaN(num)) {
        return;
    }
    var str = (Math.round(num * 100) / 100) + '';
    console.log(typeof str);
    var index = str.indexOf('.');
    console.log(index);
    if (index === -1) {
        str += '.';
        index = str.length - 1;
    }
    console.log(index);
    while (str.length <= index + 2) {
        str+='0'
    }
    return str;
}

获取字节长度
function getStrLen(str) {
    var len = str.length;
    for(var i = 0; i < str.length; i++) {
        // \[\u4e00-u9fa5]\.test('a');
        if (str[i].charCodeAt() > 255) {
            len++;
        }
    }
}

质数
function isPrime(number) {
   // If your browser doesn't support the method Number.isInteger of ECMAScript 6,
   // you can implement your own pretty easily
   if (typeof number !== 'number' || !Number.isInteger(number)) {
      // Alternatively you can throw an error.
      return false;
   }
   if (number < 2) {
      return false;
   }

   if (number === 2) {
      return true;
   } else if (number % 2 === 0) {
      return false;
   }
   var squareRoot = Math.sqrt(number); //平方根，比如Math.sqrt(9)为3
   for(var i = 3; i <= squareRoot; i += 2) {
      if (number % i === 0) {
         return false;
      }
   }
   return true;
}

最大公约数
function maxDivisor(num1,num2){
   var max=num1>num2?num1:num2,
       min=num1>num2?num2:num1;
   for(var i=min;i>=1;i--){
      if(max%i==0&&min%i==0){
         return i;
      }
   }
}
辗转相除法
function maxDivisor(num1,num2){
   if(num2==0){
      return num1;
   }else{
      return maxDivisor(num2,num1%num2);
   }
}

Bind
Function.prototype.bind = function () {
    var self = this;
    var context = arguments[0];
    var args = Array.prototype.slice.call(arguments, 1);
    return function () {
        self.apply(context, args.concat(Array.prototype.slice.call(arguments)));
    }
}


ready
如果上述代码十分难懂，下面这个简化版：

function ready(fn){

    if(document.addEventListener) {//标准浏览器

        document.addEventListener('DOMContentLoaded', function() {

            //注销事件, 避免反复触发

            document.removeEventListener('DOMContentLoaded',arguments.callee, false);

            fn();//执行函数

        }, false);

    }else if(document.attachEvent) {//IE

        document.attachEvent('onreadystatechange', function() {

            if(document.readyState == 'complete') {

                document.detachEvent('onreadystatechange', arguments.callee);

                fn();//函数执行

            }

        });

    }

};

MDN解析：当document文档正在加载时,返回"loading"。当文档结束渲染但在加载内嵌资源时，返回"interactive"，并引发DOMContentLoaded事件。当文档加载完成时,返回"complete"，并引发load事件。


事件通用用具
EventUtil = {
    // 页面加载完成后
    readyEvent : function(fn) {
        if (fn==null) {
            fn=document;
        }
        var oldonload = window.onload;
        if (typeof window.onload != 'function') {
            window.onload = fn;
        } else {
            window.onload = function() {
                oldonload();
                fn();
            };
        }
    },
    // 视能力分别使用dom0||dom2||IE方式 来绑定事件
    // 参数： 操作的元素,事件名称 ,事件处理程序
    addEvent : function(element, type, handler) {
        if (element.addEventListener) {
            //事件类型、需要执行的函数、是否捕捉
            element.addEventListener(type, handler, false);
        } else if (element.attachEvent) {
            element.attachEvent('on' + type, function() {
                handler.call(element);
            });
        } else {
            element['on' + type] = handler;
        }
    },
    // 移除事件
    removeEvent : function(element, type, handler) {
        if (element.removeEnentListener) {
            element.removeEnentListener(type, handler, false);
        } else if (element.datachEvent) {
            element.detachEvent('on' + type, handler);
        } else {
            element['on' + type] = null;
        }
    },
    // 阻止事件 (主要是事件冒泡，因为IE不支持事件捕获)
    stopPropagation : function(ev) {
        if (ev.stopPropagation) {
            ev.stopPropagation();
        } else {
            ev.cancelBubble = true;
        }
    },
    // 取消事件的默认行为
    preventDefault : function(event) {
        if (event.preventDefault) {
            event.preventDefault();
        } else {
            event.returnValue = false;
        }
    },
    // 获取事件目标
    getTarget : function(event) {
        return event.target || event.srcElement;
    },
    // 获取event对象的引用，取到事件的所有信息，确保随时能使用event；
    getEvent : function(e) {
        var ev = e || window.event;
        if (!ev) {
            var c = this.getEvent.caller;
            while (c) {
                ev = c.arguments[0];
                if (ev && Event == ev.constructor) {
                    break;
                }
                c = c.caller;
            }
        }
        return ev;
    }
};

获取最大层数
function getLevel (data) {
    let lev = 1;
    getResult(data, 1);
    function getResult(data, level) {
        if (typeof data === 'object') {
            Object.keys(data).forEach(key => {
                if (typeof data[key] === 'object') {
                    getResult(data[key], level + 1);
                } else {
                    lev = Math.max(lev, level);
                }
            });
        } else {
            lev = Math.max(lev, level);
        }
    }
    return lev;
}



sleep
function sleep (time) {
  return new Promise((resolve) => setTimeout(resolve, time));
}
// 用法
sleep(500).then(() => {
 // 这里写sleep之后需要去做的事情
})

发布订阅 on off emit
https://blog.csdn.net/roamingcode/article/details/86238419
class EventEmitter{
        constructor(){
            this._envents = {}
        }


let EventList = {

}
const on = function(eventName,callback){
if(!EventList[eventName]){
EventList[eventName] = [];
}
EventList[eventName].push(callback);
}
const emit = function(eventName,params){
if(!EventList[eventName])return;
EventList[eventName].map((cb)=>{
cb(params)
})
}
const off = function(eventName,callback){
if(!EventList[eventName])return;
if(callback){
let index = EventList[eventName].indexOf(callback);
EventList[eventName].splice(index,1);
}else{
EventList[eventName] = [];
}
}
once(event,callback){ //为事件注册单次监听器
            let wrapFanc = (...args) => {
                callback.apply(this.args)
                this.off(event,wrapFanc)
            }
            this.on(event,wrapFanc)
            return this
        }

export default {
$on:on,
$emit:emit,
$off:off
}


koa原理
return function (context, next) {
    // 记录上一次执行中间件的位置 #
    let index = -1
    return dispatch(0)
    function dispatch (i) {
    // 理论上 i 会大于 index，因为每次执行一次都会把 i递增，
     // 如果相等或者小于，则说明next()执行了多次
    if (i <= index) return Promise.reject(new Error('next() called multiple times'))
          index = i
          // 取到当前的中间件
          let fn = middleware[i]
          if (i === middleware.length) fn = next
          if (!fn) return Promise.resolve()
         try {
            return Promise.resolve(fn(context, function next () {
              return dispatch(i + 1)
            }))
          } catch (err) {
            return Promise.reject(err)
          }
        }
    }
}


连字符转驼峰
function toHump (str) {
return str.replace(/\-(\W)(\W+)/g, function (a, b, c) {
return b.toUpperCase(); + c.toLowerCase();
});
}
function toHump(str) {
    var arr = str.split('-');
    console.log(arr);
    for(var i = 0; i < arr.length; i++) {
        arr[i] = arr[i].substring(0,1).toUpperCase() + arr[i].substring(1);
    }
    return arr.join('');
}


js实现函数，防止XSS漏洞
const filterXss = (str) => {
    if (typedef str !== 'string') {
        return str
    }
    str = str.replace(/\</g, '&gt;').replace(/\>/, '&lt;').replace(/\"/, '&quot;')
    return str
}

// ES6 call
Function.prototype.call_ = function (obj) {
    obj = obj ? Object(obj) : window;
    obj.fn = this;
    // 利用拓展运算符直接将arguments转为数组
    let args = [...arguments].slice(1);
    let result = obj.fn(...args);

    delete obj.fn
    return result;
};
// ES6 apply
Function.prototype.apply_ = function (obj, arr) {
    obj = obj ? Object(obj) : window;
    obj.fn = this;
    let result;
    if (!arr) {
        result = obj.fn();
    } else {
        result = obj.fn(...arr);
    };

    delete obj.fn
    return result;
};

封装一个动画
function animation (step, ele, delay, duration, delta) {
    if (!duration) {
         return;
    }
    if (ele.timer) {
        clearInterval(ele.timer);
    }
    var start = new Date();
    ele.timer = setInterval(() => {
        var percent = (new Date() - start) / duration;

        if (percent > 1) {
          clearInterval(ele.timer);
        }
        step(Math.min(percent, 1));
    }, delay || 10)
}
animation(
    step: function (percent) {
        ele.style.left = percent * 100;
    }
);
